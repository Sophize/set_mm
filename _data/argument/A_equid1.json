{
  "citations" : [ {
    "textCitation" : "[See equid1 on Metamath](http://us.metamath.org/mpegif/equid1.html)"
  } ],
  "argumentText" : "ARGUMENT\n\n| Step | Hyp | Ref | Expression |\n|---|---|---|---|\n\n| 1 |  | #P_axc4 | |- ( A. x ( A. x -. A. x x = x -> ( x = x -> A. x x = x ) ) -> ( A. x -. A. x x = x -> A. x ( x = x -> A. x x = x ) ) ) |\n| 2 |  | #P_sp | |- ( A. x -. A. x x = x -> -. A. x x = x ) |\n| 3 |  | #P_axc9 | |- ( -. A. x x = x -> ( -. A. x x = x -> ( x = x -> A. x x = x ) ) ) |\n| 4 | 2, 2, 3 | #P_sylc | |- ( A. x -. A. x x = x -> ( x = x -> A. x x = x ) ) |\n| 5 | 1, 4 | #P_mpg | |- ( A. x -. A. x x = x -> A. x ( x = x -> A. x x = x ) ) |\n| 6 |  | #P_axc10 | |- ( A. x ( x = x -> A. x x = x ) -> x = x ) |\n| 7 | 5, 6 | #P_syl | |- ( A. x -. A. x x = x -> x = x ) |\n| 8 |  | #P_axc7 | |- ( -. A. x -. A. x x = x -> x = x ) |\n| 9 | 7, 8 | #P_pm2.61i | |- x = x |\n\\\n Proof of ~ equid from our older axioms.  This is often an axiom of equality in textbook systems, but we don't need it as an axiom since it can be proved from our other axioms (although the proof, as you can see below, is not as obvious as you might think).  This proof uses only axioms without distinct variable conditions and requires no dummy variables.  A simpler proof, similar to Tarski's, is possible if we make use of ~ ax-5 ; see the proof of ~ equid .  See ~ equid1ALT for an alternate proof. (Contributed by NM, 10-Jan-1993.)  (Proof modification is discouraged.) (New usage is discouraged.) ",
  "conclusion" : "#P_equid",
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_wal", "#T_vx.wal", "#T_wal", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wal", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wal", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wal", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wal", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_wi", "#T_vx.wal", "#T_wceq", "#T_vx.wal", "#T_vx", "#T_wceq", "#T_vx" ],
  "metaLanguage" : "METAMATH",
  "premises" : [ "#P_sylc", "#P_axc9", "#P_syl", "#P_axc7", "#P_axc4", "#P_sp", "#P_pm2.61i", "#P_mpg", "#P_axc10" ]
}