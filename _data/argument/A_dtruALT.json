{
  "citations" : [ {
    "textCitation" : "[See dtruALT on Metamath](http://us.metamath.org/mpegif/dtruALT.html)"
  } ],
  "argumentText" : "ARGUMENT\n\n| Step | Hyp | Ref | Expression |\n|---|---|---|---|\n\n| 1 |  | #P_0inp0 | |- ( y = (/) -> -. y = { (/) } ) |\n| 2 |  | #P_p0ex | |- { (/) } e. _V |\n| 3 |  | #P_eqeq2 | |- ( x = { (/) } -> ( y = x <-> y = { (/) } ) ) |\n| 4 | 3 | #P_notbid | |- ( x = { (/) } -> ( -. y = x <-> -. y = { (/) } ) ) |\n| 5 | 2, 4 | #P_spcev | |- ( -. y = { (/) } -> E. x -. y = x ) |\n| 6 | 1, 5 | #P_syl | |- ( y = (/) -> E. x -. y = x ) |\n| 7 |  | #P_0ex | |- (/) e. _V |\n| 8 |  | #P_eqeq2 | |- ( x = (/) -> ( y = x <-> y = (/) ) ) |\n| 9 | 8 | #P_notbid | |- ( x = (/) -> ( -. y = x <-> -. y = (/) ) ) |\n| 10 | 7, 9 | #P_spcev | |- ( -. y = (/) -> E. x -. y = x ) |\n| 11 | 6, 10 | #P_pm2.61i | |- E. x -. y = x |\n| 12 |  | #P_exnal | |- ( E. x -. y = x <-> -. A. x y = x ) |\n| 13 |  | #P_eqcom | |- ( y = x <-> x = y ) |\n| 14 | 13 | #P_albii | |- ( A. x y = x <-> A. x x = y ) |\n| 15 | 12, 14 | #P_xchbinx | |- ( E. x -. y = x <-> -. A. x x = y ) |\n| 16 | 11, 15 | #P_mpbi | |- -. A. x x = y |\n\\\n Alternate proof of ~ dtru which requires more axioms but is shorter and may be easier to understand. Assuming that ZF set theory is consistent, we cannot prove this theorem unless we specify that ` x ` and ` y ` be distinct.  Specifically, theorem ~ spcev requires that ` x ` must not occur in the subexpression ` -. y = { (/) } ` in step 4 nor in the subexpression ` -. y = (/) ` in step 9.  The proof verifier will require that ` x ` and ` y ` be in a distinct variable group to ensure this.  You can check this by deleting the $d statement in set.mm and rerunning the verifier, which will print a detailed explanation of the distinct variable violation.  (Contributed by NM, 15-Jul-1994.)  (Proof modification is discouraged.) (New usage is discouraged.) ",
  "conclusion" : "#P_dtru",
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_vy.tru", "#T_wceq", "#T_c0", "#T_wi", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_csn--1", "#T_c0", "#T_csn--2", "#T_csn--1", "#T_c0", "#T_csn--2", "#T_wcel", "#T_cvv", "#T_vx.wal", "#T_wceq", "#T_csn--1", "#T_c0", "#T_csn--2", "#T_wi", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wb", "#T_vy.tru", "#T_wceq", "#T_csn--1", "#T_c0", "#T_csn--2", "#T_vx.wal", "#T_wceq", "#T_csn--1", "#T_c0", "#T_csn--2", "#T_wi", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wb", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_csn--1", "#T_c0", "#T_csn--2", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_csn--1", "#T_c0", "#T_csn--2", "#T_wi", "#T_wex", "#T_vx.wal", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_vy.tru", "#T_wceq", "#T_c0", "#T_wi", "#T_wex", "#T_vx.wal", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_c0", "#T_wcel", "#T_cvv", "#T_vx.wal", "#T_wceq", "#T_c0", "#T_wi", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wb", "#T_vy.tru", "#T_wceq", "#T_c0", "#T_vx.wal", "#T_wceq", "#T_c0", "#T_wi", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wb", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_c0", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_c0", "#T_wi", "#T_wex", "#T_vx.wal", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wex", "#T_vx.wal", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wex", "#T_vx.wal", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wb", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wb", "#T_vx.wal", "#T_wceq", "#T_vy.tru", "#T_wal", "#T_vx.wal", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wb", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vy.tru", "#T_wex", "#T_vx.wal", "#T_wn", "#T_vy.tru", "#T_wceq", "#T_vx.wal", "#T_wb", "#T_wn", "#T_wal", "#T_vx.wal", "#T_vx.wal", "#T_wceq", "#T_vy.tru", "#T_wn", "#T_wal", "#T_vx", "#T_vx", "#T_wceq", "#T_vy" ],
  "metaLanguage" : "METAMATH",
  "premises" : [ "#P_spcev", "#P_albii", "#P_p0ex", "#P_exnal", "#P_notbid", "#P_0inp0", "#P_pm2.61i", "#P_eqeq2", "#P_mpbi", "#P_syl", "#P_xchbinx", "#P_0ex", "#P_eqcom" ]
}