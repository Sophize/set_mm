{
  "citations" : [ {
    "textCitation" : "[See df-wlk on Metamath](http://us.metamath.org/mpegif/df-wlk.html)"
  } ],
  "names" : [ "df-wlk" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_cwalk", "#T_wceq", "#T_vv", "#T_cmpt2--1", "#T_cvv", "#T_cmpt2--2", "#T_ve", "#T_cmpt2--3", "#T_cvv", "#T_cmpt2--4", "#T_copab--1", "#T_copab--2", "#T_vf", "#T_copab--3", "#T_vp", "#T_copab--4", "#T_copab--5", "#T_vf", "#T_wcel", "#T_cword", "#T_cdm", "#T_ve", "#T_w3a--1", "#T_vp", "#T_wf--1", "#T_cc0", "#T_cfz", "#T_chash", "#T_cfv", "#T_vf", "#T_wf--2", "#T_vv", "#T_w3a--2", "#T_wral--1", "#T_vk", "#T_wral--2", "#T_cc0", "#T_cfzo", "#T_chash", "#T_cfv", "#T_vf", "#T_ve", "#T_cfv", "#T_vf", "#T_cfv", "#T_vk", "#T_wceq", "#T_cpr--1", "#T_vp", "#T_cfv", "#T_vk", "#T_cpr--2", "#T_vp", "#T_cfv", "#T_vk", "#T_caddc", "#T_c1", "#T_cpr--3", "#T_copab--6", "#T_ve", "#T_vf", "#T_vk", "#T_vp", "#T_vv" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Define the set of all Walks (in an undirected graph). According to Wikipedia (\"Path (graph theory)\", ~ https://en.wikipedia.org/wiki/Path_(graph_theory) , 3-Oct-2017):  \"A walk of length k in a graph is an alternating sequence of vertices and edges, v0 , e0 , v1 , e1 , v2 , ... , v(k-1) , e(k-1) , v(k) which begins and ends with vertices.  If the graph is undirected, then the endpoints of e(i) are v(i) and v(i+1).\" According to Bollobas:  \" A walk W in a graph is an alternating sequence of vertices and edges x0 , e1 , x1 , e2 , ... , e(l) , x(l) where e(i) = x(i-1)x(i), 0<i<=l.\", see Definition of [Bollobas] p. 4. Therefore, a walk can be represented by two mappings f from { 1 , ... , n } and p from { 0 , ... , n }, where f enumerates the (indices of the) edges, and p enumerates the vertices.  So the walk is represented by the following sequence: p(0) e(f(1)) p(1) e(f(2)) ... p(n-1) e(f(n)) p(n). (Contributed by Alexander van der Vekens and Mario Carneiro, 4-Oct-2017.) ",
  "statement" : "df-wlk $p |- Walks = ( v e. _V , e e. _V |-> { <. f , p >. | ( f e. Word dom e /\\ p : ( 0 ... ( # ` f ) ) --> v /\\ A. k e. ( 0 ..^ ( # ` f ) ) ( e ` ( f ` k ) ) = { ( p ` k ) , ( p ` ( k + 1 ) ) } ) } ) $.\n$d e f k p v $."
}