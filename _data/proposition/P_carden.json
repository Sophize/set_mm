{
  "citations" : [ {
    "textCitation" : "[See carden on Metamath](http://us.metamath.org/mpegif/carden.html)"
  } ],
  "names" : [ "carden" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_cA", "#T_wcel", "#T_cC", "#T_wa", "#T_cB", "#T_wcel", "#T_cD", "#T_wi", "#T_ccrd", "#T_cfv", "#T_cA", "#T_wceq", "#T_ccrd", "#T_cfv", "#T_cB", "#T_wb", "#T_cA", "#T_cen", "#T_cB" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Two sets are equinumerous iff their cardinal numbers are equal.  This important theorem expresses the essential concept behind \"cardinality\" or \"size.\"  This theorem appears as Proposition 10.10 of [TakeutiZaring] p. 85, Theorem 7P of [Enderton] p. 197, and Theorem 9 of [Suppes] p. 242 (among others).  The Axiom of Choice is required for its proof.  Related theorems are ~ hasheni and the finite-set-only ~ hashen . This theorem is also known as Hume's Principle.  Gottlob Frege's two-volume _Grundgesetze der Arithmetik_ used his Basic Law V to prove this theorem.  Unfortunately Basic Law V caused Frege's system to be inconsistent because it was subject to Russell's paradox (see ~ ru ). Later scholars have found that Frege primarily used Basic Law V to Hume's Principle.  If Basic Law V is replaced by Hume's Principle in Frege's system, much of Frege's work is restored. _Grundgesetze der Arithmetik_, once Basic Law V is replaced, proves \"Frege's theorem\" (the Peano axioms of arithmetic can be derived in second-order logic from Hume's principle).  See https://plato.stanford.edu/entries/frege-theorem .  We take a different approach, using first-order logic and ZFC, to prove the Peano axioms of arithmetic. The theory of cardinality can also be developed without AC by introducing \"card\" as a primitive notion and stating this theorem as an axiom, as is done with the axiom for cardinal numbers in [Suppes] p. 111.  Finally, if we allow the Axiom of Regularity, we can avoid AC by defining the cardinal number of a set as the set of all sets equinumerous to it and having the least possible rank (see ~ karden ).  (Contributed by NM, 22-Oct-2003.) ",
  "statement" : "carden $p |- ( ( A e. C /\\ B e. D ) -> ( ( card ` A ) = ( card ` B ) <-> A ~~ B ) ) $."
}