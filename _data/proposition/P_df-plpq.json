{
  "citations" : [ {
    "textCitation" : "[See df-plpq on Metamath](http://us.metamath.org/mpegif/df-plpq.html)"
  } ],
  "names" : [ "df-plpq" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_cplpq", "#T_wceq", "#T_vx", "#T_cmpt2--1", "#T_cnpi", "#T_cxp", "#T_cnpi", "#T_cmpt2--2", "#T_vy", "#T_cmpt2--3", "#T_cnpi", "#T_cxp", "#T_cnpi", "#T_cmpt2--4", "#T_cop--1", "#T_c1st", "#T_cfv", "#T_vx", "#T_cmi", "#T_c2nd", "#T_cfv", "#T_vy", "#T_cpli", "#T_c1st", "#T_cfv", "#T_vy", "#T_cmi", "#T_c2nd", "#T_cfv", "#T_vx", "#T_cop--2", "#T_c2nd", "#T_cfv", "#T_vx", "#T_cmi", "#T_c2nd", "#T_cfv", "#T_vy", "#T_cop--3", "#T_vx", "#T_vy" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Define pre-addition on positive fractions.  This is a \"temporary\" set used in the construction of complex numbers ~ df-c , and is intended to be used only by the construction.  This \"pre-addition\" operation works directly with ordered pairs of integers.  The actual positive fraction addition ` +Q ` ( ~ df-plq ) works with the equivalence classes of these ordered pairs determined by the equivalence relation ` ~Q ` ( ~ df-enq ).  (Analogous remarks apply to the other \"pre-\" operations in the complex number construction that follows.)  From Proposition 9-2.3 of [Gleason] p. 117.  (Contributed by NM, 28-Aug-1995.) (New usage is discouraged.) \n\n---\n\n Define pre-addition on positive fractions.  This is a \"temporary\" set used in the construction of complex numbers, and is intended to be used only by the construction.  This \"pre-addition\" operation works directly with ordered pairs of integers.  The actual positive fraction addition ` +Q ` ( ~ df-plqqs ) works with the equivalence classes of these ordered pairs determined by the equivalence relation ` ~Q ` ( ~ df-enq ).  (Analogous remarks apply to the other \"pre-\" operations in the complex number construction that follows.)  From Proposition 9-2.3 of [Gleason] p. 117.  (Contributed by NM, 28-Aug-1995.) ",
  "statement" : "df-plpq $p |- +pQ = ( x e. ( N. X. N. ) , y e. ( N. X. N. ) |-> <. ( ( ( 1st ` x ) .N ( 2nd ` y ) ) +N ( ( 1st ` y ) .N ( 2nd ` x ) ) ) , ( ( 2nd ` x ) .N ( 2nd ` y ) ) >. ) $.\n$d x y $."
}