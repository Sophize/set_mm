{
  "citations" : [ {
    "textCitation" : "[See df-nf on Metamath](http://us.metamath.org/mpegif/df-nf.html)"
  } ],
  "names" : [ "df-nf" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_wnf", "#T_vx", "#T_wph", "#T_wb", "#T_wal", "#T_vx", "#T_wph", "#T_wi", "#T_wal", "#T_vx", "#T_wph" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Define the not-free predicate for wffs.  This is read \" ` x ` is not free in ` ph ` \".  Not-free means that the value of ` x ` cannot affect the value of ` ph ` , e.g., any occurrence of ` x ` in ` ph ` is effectively bound by a \"for all\" or something that expands to one (such as \"there exists\").  In particular, substitution for a variable not free in a wff does not affect its value ( ~ sbf ).  An example of where this is used is ~ stdpc5 .  See ~ nf2 for an alternative definition which does not involve nested quantifiers on the same variable. Not-free is a commonly used constraint, so it is useful to have a notation for it.  Surprisingly, there is no common formal notation for it, so here we devise one.  Our definition lets us work with the not-free notion within the logic itself rather than as a metalogical side condition. To be precise, our definition really means \"effectively not free,\" because it is slightly less restrictive than the usual textbook definition for not-free (which only considers syntactic freedom).  For example, ` x ` is effectively not free in the bare expression ` x = x ` (see ~ nfequid ), even though ` x ` would be considered free in the usual textbook definition, because the value of ` x ` in the expression ` x = x ` cannot affect the truth of the expression (and thus substitution will not change the result). This predicate only applies to wffs.  See ~ df-nfc for a not-free predicate for class variables.  (Contributed by Mario Carneiro, 11-Aug-2016.) \n\n---\n\n Define the not-free predicate for wffs.  This is read \" ` x ` is not free in ` ph ` \".  Not-free means that the value of ` x ` cannot affect the value of ` ph ` , e.g., any occurrence of ` x ` in ` ph ` is effectively bound by a \"for all\" or something that expands to one (such as \"there exists\").  In particular, substitution for a variable not free in a wff does not affect its value ( ~ sbf ).  An example of where this is used is ~ stdpc5 .  See ~ nf2 for an alternative definition which does not involve nested quantifiers on the same variable. Not-free is a commonly used constraint, so it is useful to have a notation for it.  Surprisingly, there is no common formal notation for it, so here we devise one.  Our definition lets us work with the not-free notion within the logic itself rather than as a metalogical side condition. To be precise, our definition really means \"effectively not free,\" because it is slightly less restrictive than the usual textbook definition for not-free (which only considers syntactic freedom).  For example, ` x ` is effectively not free in the bare expression ` x = x ` , even though ` x ` would be considered free in the usual textbook definition, because the value of ` x ` in the expression ` x = x ` cannot affect the truth of the expression (and thus substitution will not change the result). (Contributed by Mario Carneiro, 11-Aug-2016.) ",
  "statement" : "df-nf $p |- ( F/ x ph <-> A. x ( ph -> A. x ph ) ) $."
}