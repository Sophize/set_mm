{
  "citations" : [ {
    "textCitation" : "[See algcvg on Metamath](http://us.metamath.org/mpegif/algcvg.html)"
  } ],
  "names" : [ "algcvg" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_cF", "#T_wf--1", "#T_cS", "#T_wf--2", "#T_cS", "#T_cR", "#T_wceq", "#T_cseq--1", "#T_cc0", "#T_cF", "#T_ccom", "#T_c1st", "#T_cseq--2", "#T_cn0", "#T_cxp", "#T_csn--1", "#T_cA", "#T_csn--2", "#T_cC", "#T_wf--1", "#T_cS", "#T_wf--2", "#T_cn0", "#T_vz", "#T_wcel", "#T_cS", "#T_wi", "#T_cC", "#T_cfv", "#T_cF", "#T_cfv", "#T_vz", "#T_wne", "#T_cc0", "#T_wi", "#T_cC", "#T_cfv", "#T_cF", "#T_cfv", "#T_vz", "#T_clt", "#T_cC", "#T_cfv", "#T_vz", "#T_cN", "#T_wceq", "#T_cC", "#T_cfv", "#T_cA", "#T_cA", "#T_wcel", "#T_cS", "#T_wi", "#T_cC", "#T_cfv", "#T_cR", "#T_cfv", "#T_cN", "#T_wceq", "#T_cc0", "#T_cC", "#T_vz", "#T_cF", "#T_vz", "#T_cR", "#T_vz", "#T_cS", "#T_vz" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " One way to prove that an algorithm halts is to construct a countdown function ` C : S --> NN0 ` whose value is guaranteed to decrease for each iteration of ` F ` until it reaches ` 0 ` .  That is, if ` X e. S ` is not a fixed point of ` F ` , then ` ( C `` ( F `` X ) ) < ( C `` X ) ` . If ` C ` is a countdown function for algorithm ` F ` , the sequence ` ( C `` ( R `` k ) ) ` reaches ` 0 ` after at most ` N ` steps, where ` N ` is the value of ` C ` for the initial state ` A ` .  (Contributed by Paul Chapman, 22-Jun-2011.) ",
  "statement" : "algcvg.1 $e |- F : S --> S $.\nalgcvg.2 $e |- R = seq 0 ( ( F o. 1st ) , ( NN0 X. { A } ) ) $.\nalgcvg.3 $e |- C : S --> NN0 $.\nalgcvg.4 $e |- ( z e. S -> ( ( C ` ( F ` z ) ) =/= 0 -> ( C ` ( F ` z ) ) < ( C ` z ) ) ) $.\nalgcvg.5 $e |- N = ( C ` A ) $.\nalgcvg $p |- ( A e. S -> ( C ` ( R ` N ) ) = 0 ) $.\n$d C z $.\n$d F z $.\n$d R z $.\n$d S z $."
}