{
  "citations" : [ {
    "textCitation" : "[See kur14lem7 on Metamath](http://us.metamath.org/mpegif/kur14lem7.html)"
  } ],
  "names" : [ "kur14lem7" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_cJ", "#T_wcel", "#T_ctop", "#T_cX", "#T_wceq", "#T_cuni", "#T_cJ", "#T_cK", "#T_wceq", "#T_ccl", "#T_cfv", "#T_cJ", "#T_cI", "#T_wceq", "#T_cnt", "#T_cfv", "#T_cJ", "#T_cA", "#T_wss", "#T_cX", "#T_cB", "#T_wceq", "#T_cX", "#T_cdif", "#T_cK", "#T_cfv", "#T_cA", "#T_cC", "#T_wceq", "#T_cK", "#T_cfv", "#T_cX", "#T_cdif", "#T_cA", "#T_cD", "#T_wceq", "#T_cI", "#T_cfv", "#T_cK", "#T_cfv", "#T_cA", "#T_cT", "#T_wceq", "#T_ctp--1", "#T_cA", "#T_ctp--2", "#T_cX", "#T_cdif", "#T_cA", "#T_ctp--3", "#T_cK", "#T_cfv", "#T_cA", "#T_ctp--4", "#T_cun", "#T_ctp--1", "#T_cB", "#T_ctp--2", "#T_cC", "#T_ctp--3", "#T_cI", "#T_cfv", "#T_cA", "#T_ctp--4", "#T_cun", "#T_ctp--1", "#T_cK", "#T_cfv", "#T_cB", "#T_ctp--2", "#T_cD", "#T_ctp--3", "#T_cK", "#T_cfv", "#T_cI", "#T_cfv", "#T_cA", "#T_ctp--4", "#T_cun", "#T_ctp--1", "#T_cI", "#T_cfv", "#T_cC", "#T_ctp--2", "#T_cK", "#T_cfv", "#T_cD", "#T_ctp--3", "#T_cI", "#T_cfv", "#T_cK", "#T_cfv", "#T_cB", "#T_ctp--4", "#T_cun", "#T_cpr--1", "#T_cK", "#T_cfv", "#T_cI", "#T_cfv", "#T_cC", "#T_cpr--2", "#T_cI", "#T_cfv", "#T_cK", "#T_cfv", "#T_cI", "#T_cfv", "#T_cA", "#T_cpr--3", "#T_cN", "#T_wcel", "#T_cT", "#T_wi", "#T_cN", "#T_wss", "#T_cX", "#T_wa", "#T_cpr--1", "#T_cX", "#T_cdif", "#T_cN", "#T_cpr--2", "#T_cK", "#T_cfv", "#T_cN", "#T_cpr--3", "#T_wss", "#T_cT" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Lemma for ~ kur14 : main proof.  The set ` T ` here contains all the distinct combinations of ` k ` and ` c ` that can arise, and we prove here that applying ` k ` or ` c ` to any element of ` T ` yields another elemnt of ` T ` .  In operator shorthand, we have ` T = { A , c A , k A ` ` , c k A , k c A , c k c A , k c k A , c k c k A , k c k c A , ` ` c k c k c A , k c k c k A , c k c k c k A , k c k c k c A , ` ` c k c k c k c A } ` .  From the identities ` c c A = A ` and ` k k A = k A ` , we can reduce any operator combination containing two adjacent identical operators, which is why the list only contains alternating sequences.  The reason the sequences don't keep going after a certain point is due to the identity ` k c k A = k c k c k c k A ` , proved in ~ kur14lem6 .  (Contributed by Mario Carneiro, 11-Feb-2015.) ",
  "statement" : "kur14lem.j $e |- J e. Top $.\nkur14lem.x $e |- X = U. J $.\nkur14lem.k $e |- K = ( cls ` J ) $.\nkur14lem.i $e |- I = ( int ` J ) $.\nkur14lem.a $e |- A C_ X $.\nkur14lem.b $e |- B = ( X \\ ( K ` A ) ) $.\nkur14lem.c $e |- C = ( K ` ( X \\ A ) ) $.\nkur14lem.d $e |- D = ( I ` ( K ` A ) ) $.\nkur14lem.t $e |- T = ( ( ( { A , ( X \\ A ) , ( K ` A ) } u. { B , C , ( I ` A ) } ) u. { ( K ` B ) , D , ( K ` ( I ` A ) ) } ) u. ( { ( I ` C ) , ( K ` D ) , ( I ` ( K ` B ) ) } u. { ( K ` ( I ` C ) ) , ( I ` ( K ` ( I ` A ) ) ) } ) ) $.\nkur14lem7 $p |- ( N e. T -> ( N C_ X /\\ { ( X \\ N ) , ( K ` N ) } C_ T ) ) $."
}