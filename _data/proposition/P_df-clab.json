{
  "citations" : [ {
    "textCitation" : "[See df-clab on Metamath](http://us.metamath.org/mpegif/df-clab.html)"
  } ],
  "names" : [ "df-clab" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_vx", "#T_wcel", "#T_cab--1", "#T_vy", "#T_cab--2", "#T_wph", "#T_cab--3", "#T_wb", "#T_wsb--1", "#T_vx", "#T_wsb--2", "#T_vy", "#T_wsb--3", "#T_wph" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Define class abstraction notation (so-called by Quine), also called a \"class builder\" in the literature. ` x ` and ` y ` need not be distinct. Definition 2.1 of [Quine] p. 16.  Typically, ` ph ` will have ` y ` as a free variable, and \" ` { y | ph } ` \" is read \"the class of all sets ` y ` such that ` ph ( y ) ` is true.\"  We do not define ` { y | ph } ` in isolation but only as part of an expression that extends or \"overloads\" the ` e. ` relationship. This is our first use of the ` e. ` symbol to connect classes instead of sets.  The syntax definition ~ wcel , which extends or \"overloads\" the ~ wel definition connecting setvar variables, requires that both sides of ` e. ` be classes.  In ~ df-cleq and ~ df-clel , we introduce a new kind of variable (class variable) that can be substituted with expressions such as ` { y | ph } ` .  In the present definition, the ` x ` on the left-hand side is a setvar variable.  Syntax definition ~ cv allows us to substitute a setvar variable ` x ` for a class variable: all sets are classes by ~ cvjust (but not necessarily vice-versa).  For a full description of how classes are introduced and how to recover the primitive language, see the discussion in Quine (and under ~ abeq2 for a quick overview). Because class variables can be substituted with compound expressions and setvar variables cannot, it is often useful to convert a theorem containing a free setvar variable to a more general version with a class variable.  This is done with theorems such as ~ vtoclg which is used, for example, to convert ~ elirrv to ~ elirr . This is called the \"axiom of class comprehension\" by [Levy] p. 338, who treats the theory of classes as an extralogical extension to our logic and set theory axioms.  He calls the construction ` { y | ph } ` a \"class term\". While the three class definitions ~ df-clab , ~ df-cleq , and ~ df-clel are eliminable and conservative and thus meet the requirements for sound definitions, they are technically axioms in that they do not satisfy the requirements for the current definition checker.  The proofs of conservativity require external justification that is beyond the scope of the definition checker. For a general discussion of the theory of classes, see ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM, 26-May-1993.) \n\n---\n\n Define class abstraction notation (so-called by Quine), also called a \"class builder\" in the literature. ` x ` and ` y ` need not be distinct. Definition 2.1 of [Quine] p. 16.  Typically, ` ph ` will have ` y ` as a free variable, and \" ` { y | ph } ` \" is read \"the class of all sets ` y ` such that ` ph ( y ) ` is true.\"  We do not define ` { y | ph } ` in isolation but only as part of an expression that extends or \"overloads\" the ` e. ` relationship. This is our first use of the ` e. ` symbol to connect classes instead of sets.  The syntax definition ~ wcel , which extends or \"overloads\" the ~ wel definition connecting setvar variables, requires that both sides of ` e. ` be a class.  In ~ df-cleq and ~ df-clel , we introduce a new kind of variable (class variable) that can substituted with expressions such as ` { y | ph } ` .  In the present definition, the ` x ` on the left-hand side is a setvar variable.  Syntax definition ~ cv allows us to substitute a setvar variable ` x ` for a class variable: all sets are classes by ~ cvjust (but not necessarily vice-versa).  For a full description of how classes are introduced and how to recover the primitive language, see the discussion in Quine (and under ~ abeq2 for a quick overview). Because class variables can be substituted with compound expressions and setvar variables cannot, it is often useful to convert a theorem containing a free setvar variable to a more general version with a class variable. This is called the \"axiom of class comprehension\" by [Levy] p. 338, who treats the theory of classes as an extralogical extension to our logic and set theory axioms.  He calls the construction ` { y | ph } ` a \"class term\". For a general discussion of the theory of classes, see ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM, 5-Aug-1993.) ",
  "statement" : "df-clab $p |- ( x e. { y | ph } <-> [ x / y ] ph ) $."
}