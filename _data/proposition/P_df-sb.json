{
  "citations" : [ {
    "textCitation" : "[See df-sb on Metamath](http://us.metamath.org/mpegif/df-sb.html)"
  } ],
  "names" : [ "df-sb" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_wsb--1", "#T_vy", "#T_wsb--2", "#T_vx", "#T_wsb--3", "#T_wph", "#T_wb", "#T_vx", "#T_wceq", "#T_vy", "#T_wi", "#T_wph", "#T_wa", "#T_wex", "#T_vx", "#T_vx", "#T_wceq", "#T_vy", "#T_wa", "#T_wph" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Define proper substitution.  Remark 9.1 in [Megill] p. 447 (p. 15 of the preprint).  For our notation, we use ` [ y / x ] ph ` to mean \"the wff that results from the proper substitution of ` y ` for ` x ` in the wff ` ph ` .\"  That is, ` y ` properly replaces ` x ` .  For example, ` [ x / y ] z e. y ` is the same as ` z e. x ` , as shown in ~ elsb4 .  We can also use ` [ y / x ] ph ` in place of the \"free for\" side condition used in traditional predicate calculus; see, for example, ~ stdpc4 . Our notation was introduced in Haskell B. Curry's _Foundations of Mathematical Logic_ (1977), p. 316 and is frequently used in textbooks of lambda calculus and combinatory logic.  This notation improves the common but ambiguous notation, \" ` ph ( y ) ` is the wff that results when ` y ` is properly substituted for ` x ` in ` ph ( x ) ` .\"  For example, if the original ` ph ( x ) ` is ` x = y ` , then ` ph ( y ) ` is ` y = y ` , from which we obtain that ` ph ( x ) ` is ` x = x ` .  So what exactly does ` ph ( x ) ` mean?  Curry's notation solves this problem. In most books, proper substitution has a somewhat complicated recursive definition with multiple cases based on the occurrences of free and bound variables in the wff.  Instead, we use a single formula that is exactly equivalent and gives us a direct definition.  We later prove that our definition has the properties we expect of proper substitution (see theorems ~ sbequ , ~ sbcom2 and ~ sbid2v ). Note that our definition is valid even when ` x ` and ` y ` are replaced with the same variable, as ~ sbid shows.  We achieve this by having ` x ` free in the first conjunct and bound in the second.  We can also achieve this by using a dummy variable, as the alternate definition ~ dfsb7 shows (which some logicians may prefer because it doesn't mix free and bound variables).  Another version that mixes free and bound variables is ~ dfsb3 .  When ` x ` and ` y ` are distinct, we can express proper substitution with the simpler expressions of ~ sb5 and ~ sb6 . There are no restrictions on any of the variables, including what variables may occur in wff ` ph ` .  (Contributed by NM, 10-May-1993.) \n\n---\n\n Define proper substitution.  Remark 9.1 in [Megill] p. 447 (p. 15 of the preprint).  For our notation, we use ` [ y / x ] ph ` to mean \"the wff that results when ` y ` is properly substituted for ` x ` in the wff ` ph ` .\"  We can also use ` [ y / x ] ph ` in place of the \"free for\" side condition used in traditional predicate calculus; see, for example, ~ stdpc4 . Our notation was introduced in Haskell B. Curry's _Foundations of Mathematical Logic_ (1977), p. 316 and is frequently used in textbooks of lambda calculus and combinatory logic.  This notation improves the common but ambiguous notation, \" ` ph ( y ) ` is the wff that results when ` y ` is properly substituted for ` x ` in ` ph ( x ) ` .\"  For example, if the original ` ph ( x ) ` is ` x = y ` , then ` ph ( y ) ` is ` y = y ` , from which we obtain that ` ph ( x ) ` is ` x = x ` .  So what exactly does ` ph ( x ) ` mean?  Curry's notation solves this problem. In most books, proper substitution has a somewhat complicated recursive definition with multiple cases based on the occurrences of free and bound variables in the wff.  Instead, we use a single formula that is exactly equivalent and gives us a direct definition.  We later prove that our definition has the properties we expect of proper substitution (see theorems ~ sbequ , ~ sbcom2 and ~ sbid2v ). Note that our definition is valid even when ` x ` and ` y ` are replaced with the same variable, as ~ sbid shows.  We achieve this by having ` x ` free in the first conjunct and bound in the second.  We can also achieve this by using a dummy variable, as the alternate definition ~ dfsb7 shows (which some logicians may prefer because it doesn't mix free and bound variables).  Another alternate definition which uses a dummy variable is ~ dfsb7a . When ` x ` and ` y ` are distinct, we can express proper substitution with the simpler expressions of ~ sb5 and ~ sb6 . In classical logic, another possible definition is ` ( x = y /\\ ph ) \\/ A. x ( x = y -> ph ) ` but we do not have an intuitionistic proof that this is equivalent. There are no restrictions on any of the variables, including what variables may occur in wff ` ph ` .  (Contributed by NM, 5-Aug-1993.) ",
  "statement" : "df-sb $p |- ( [ y / x ] ph <-> ( ( x = y -> ph ) /\\ E. x ( x = y /\\ ph ) ) ) $."
}