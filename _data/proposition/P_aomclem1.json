{
  "citations" : [ {
    "textCitation" : "[See aomclem1 on Metamath](http://us.metamath.org/mpegif/aomclem1.html)"
  } ],
  "names" : [ "aomclem1" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_cB", "#T_wceq", "#T_copab--1", "#T_copab--2", "#T_va", "#T_copab--3", "#T_vb", "#T_copab--4", "#T_copab--5", "#T_wrex--1", "#T_vc", "#T_wrex--2", "#T_cr1", "#T_cfv", "#T_cuni", "#T_cdm", "#T_vz", "#T_vc", "#T_wcel", "#T_vb", "#T_wa", "#T_wn", "#T_vc", "#T_wcel", "#T_va", "#T_wa", "#T_wral--1", "#T_vd", "#T_wral--2", "#T_cr1", "#T_cfv", "#T_cuni", "#T_cdm", "#T_vz", "#T_vd", "#T_vz", "#T_cfv", "#T_cuni", "#T_cdm", "#T_vz", "#T_vc", "#T_wi", "#T_vd", "#T_wcel", "#T_va", "#T_wb", "#T_vd", "#T_wcel", "#T_vb", "#T_copab--6", "#T_wph", "#T_wi", "#T_cdm", "#T_vz", "#T_wcel", "#T_con0", "#T_wph", "#T_wi", "#T_cdm", "#T_vz", "#T_wceq", "#T_csuc", "#T_cuni", "#T_cdm", "#T_vz", "#T_wph", "#T_wi", "#T_wral--1", "#T_va", "#T_wral--2", "#T_cdm", "#T_vz", "#T_vz", "#T_cfv", "#T_va", "#T_wwe", "#T_cr1", "#T_cfv", "#T_va", "#T_wph", "#T_wi", "#T_cB", "#T_wor", "#T_cr1", "#T_cfv", "#T_cdm", "#T_vz", "#T_va", "#T_vb", "#T_vc", "#T_vd", "#T_vz" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Lemma for ~ dfac11 .  This is the beginning of the proof that multiple choice is equivalent to choice.  Our goal is to construct, by transfinite recursion, a well-ordering of ` ( R1 `` A ) ` .  In what follows, ` A ` is the index of the rank we wish to well-order, ` z ` is the collection of well-orderings constructed so far, ` dom z ` is the set of ordinal indexes of constructed ranks i.e. the next rank to construct, and ` y ` is a postulated multiple-choice function. Successor case 1, define a simple ordering from the well-ordered predecessor.  (Contributed by Stefan O'Rear, 18-Jan-2015.) ",
  "statement" : "aomclem1.b $e |- B = { <. a , b >. | E. c e. ( R1 ` U. dom z ) ( ( c e. b /\\ -. c e. a ) /\\ A. d e. ( R1 ` U. dom z ) ( d ( z ` U. dom z ) c -> ( d e. a <-> d e. b ) ) ) } $.\naomclem1.on $e |- ( ph -> dom z e. On ) $.\naomclem1.su $e |- ( ph -> dom z = suc U. dom z ) $.\naomclem1.we $e |- ( ph -> A. a e. dom z ( z ` a ) We ( R1 ` a ) ) $.\naomclem1 $p |- ( ph -> B Or ( R1 ` dom z ) ) $.\n$d a b c d z $."
}