{
  "citations" : [ {
    "textCitation" : "[See df-sat on Metamath](http://us.metamath.org/mpegif/df-sat.html)"
  } ],
  "names" : [ "df-sat" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_csat", "#T_wceq", "#T_vm", "#T_cmpt2--1", "#T_cvv", "#T_cmpt2--2", "#T_ve", "#T_cmpt2--3", "#T_cvv", "#T_cmpt2--4", "#T_crdg--1", "#T_vf", "#T_cmpt--1", "#T_cvv", "#T_cmpt--2", "#T_vf", "#T_cun", "#T_copab--1", "#T_copab--2", "#T_vx", "#T_copab--3", "#T_vy", "#T_copab--4", "#T_copab--5", "#T_wrex--1", "#T_vu", "#T_wrex--2", "#T_vf", "#T_wrex--1", "#T_vv", "#T_wrex--2", "#T_vf", "#T_vx", "#T_wceq", "#T_c1st", "#T_cfv", "#T_vu", "#T_cgna", "#T_c1st", "#T_cfv", "#T_vv", "#T_wa", "#T_vy", "#T_wceq", "#T_vm", "#T_cmap", "#T_com", "#T_cdif", "#T_c2nd", "#T_cfv", "#T_vu", "#T_cin", "#T_c2nd", "#T_cfv", "#T_vv", "#T_wo", "#T_wrex--1", "#T_vi", "#T_wrex--2", "#T_com", "#T_vx", "#T_wceq", "#T_cgol", "#T_vi", "#T_c1st", "#T_cfv", "#T_vu", "#T_wa", "#T_vy", "#T_wceq", "#T_crab--1", "#T_va", "#T_crab--2", "#T_vm", "#T_cmap", "#T_com", "#T_crab--3", "#T_wral--1", "#T_vz", "#T_wral--2", "#T_vm", "#T_csn--1", "#T_cop--1", "#T_vi", "#T_cop--2", "#T_vz", "#T_cop--3", "#T_csn--2", "#T_cun", "#T_va", "#T_cres", "#T_com", "#T_cdif", "#T_csn--1", "#T_vi", "#T_csn--2", "#T_wcel", "#T_c2nd", "#T_cfv", "#T_vu", "#T_crab--4", "#T_copab--6", "#T_crdg--2", "#T_copab--1", "#T_copab--2", "#T_vx", "#T_copab--3", "#T_vy", "#T_copab--4", "#T_copab--5", "#T_wrex--1", "#T_vi", "#T_wrex--2", "#T_com", "#T_wrex--1", "#T_vj", "#T_wrex--2", "#T_com", "#T_vx", "#T_wceq", "#T_vi", "#T_cgoe", "#T_vj", "#T_wa", "#T_vy", "#T_wceq", "#T_crab--1", "#T_va", "#T_crab--2", "#T_vm", "#T_cmap", "#T_com", "#T_crab--3", "#T_va", "#T_cfv", "#T_vi", "#T_ve", "#T_va", "#T_cfv", "#T_vj", "#T_crab--4", "#T_copab--6", "#T_cres", "#T_csuc", "#T_com", "#T_va", "#T_ve", "#T_vf", "#T_vi", "#T_vj", "#T_vm", "#T_vu", "#T_vv", "#T_vx", "#T_vy", "#T_vz" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Define the satisfaction predicate. This recursive construction builds up a function over wff codes and simultaneously defines the set of assignments to all variables from ` M ` that makes the coded wff true in the model ` M ` , where ` e. ` is interpreted as the binary relation ` E ` on ` M ` . The interpretation of the statement ` S e. ( ( ( M Sat E ) `` n ) `` U ) ` is that for the model ` <. M , E >. ` , ` S : _om --> M ` is a valuation of the variables (v_0 ` = ( S `` (/) ) ` , v_1 ` = ( S `` 1o ) ` , etc.) and ` U ` is a code for a wff using ` e. , -/\\ , A. ` that is true under the assignment ` S ` . The function is defined by finite recursion; ` ( ( M Sat E ) `` n ) ` only operates on wffs of depth at most ` n e. _om ` , and ` ( ( M Sat E ) `` _om ) = U_ n e. _om ( ( M Sat E ) `` n ) ` operates on all wffs. The coding scheme for the wffs is defined so that <HTML><ul> <li>v<sub>i</sub> ` e. ` v<sub>j</sub> is coded as ` <. (/) , <. i , j >. >. ` ,</li> <li> ` ( ph -/\\ ps ) ` is coded as ` <. 1o , <. ph , ps >. >. ` , and</li> <li> ` A. ` v<sub>i</sub> ` ph ` is coded as ` <. 2o , <. i , ph >. >. ` .</li></ul></HTML> (Contributed by Mario Carneiro, 14-Jul-2013.)  ",
  "statement" : "df-sat $p |- Sat = ( m e. _V , e e. _V |-> ( rec ( ( f e. _V |-> ( f u. { <. x , y >. | E. u e. f ( E. v e. f ( x = ( ( 1st ` u ) |g ( 1st ` v ) ) /\\ y = ( ( m ^m _om ) \\ ( ( 2nd ` u ) i^i ( 2nd ` v ) ) ) ) \\/ E. i e. _om ( x = A.g i ( 1st ` u ) /\\ y = { a e. ( m ^m _om ) | A. z e. m ( { <. i , z >. } u. ( a |` ( _om \\ { i } ) ) ) e. ( 2nd ` u ) } ) ) } ) ) , { <. x , y >. | E. i e. _om E. j e. _om ( x = ( i e.g j ) /\\ y = { a e. ( m ^m _om ) | ( a ` i ) e ( a ` j ) } ) } ) |` suc _om ) ) $.\n$d a e f i j m u v x y z $."
}