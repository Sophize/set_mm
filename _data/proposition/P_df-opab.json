{
  "citations" : [ {
    "textCitation" : "[See df-opab on Metamath](http://us.metamath.org/mpegif/df-opab.html)"
  } ],
  "names" : [ "df-opab" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_copab--1", "#T_copab--2", "#T_vx", "#T_copab--3", "#T_vy", "#T_copab--4", "#T_copab--5", "#T_wph", "#T_copab--6", "#T_wceq", "#T_cab--1", "#T_vz", "#T_cab--2", "#T_wex", "#T_vx", "#T_wex", "#T_vy", "#T_vz", "#T_wceq", "#T_cop--1", "#T_vx", "#T_cop--2", "#T_vy", "#T_cop--3", "#T_wa", "#T_wph", "#T_cab--3", "#T_wph", "#T_vz", "#T_vx", "#T_vz", "#T_vy", "#T_vz" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Define the class abstraction of a collection of ordered pairs. Definition 3.3 of [Monk1] p. 34.  Usually ` x ` and ` y ` are distinct, although the definition doesn't strictly require it (see ~ dfid2 for a case where they are not distinct).  The brace notation is called \"class abstraction\" by Quine; it is also (more commonly) called a \"class builder\" in the literature.  An alternate definition using no existential quantifiers is shown by ~ dfopab2 .  For example, ` R = { <. x , y >. | ( x e. CC /\\ y e. CC /\\ ( x + 1 ) = y ) } ` ` -> 3 R 4 ` ( ~ ex-opab ).  (Contributed by NM, 4-Jul-1994.) \n\n---\n\n Define the class abstraction of a collection of ordered pairs. Definition 3.3 of [Monk1] p. 34.  Usually ` x ` and ` y ` are distinct, although the definition doesn't strictly require it.  The brace notation is called \"class abstraction\" by Quine; it is also (more commonly) called a \"class builder\" in the literature.  (Contributed by NM, 4-Jul-1994.) ",
  "statement" : "df-opab $p |- { <. x , y >. | ph } = { z | E. x E. y ( z = <. x , y >. /\\ ph ) } $.\n$d ph z $.\n$d x z $.\n$d y z $."
}