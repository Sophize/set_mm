{
  "citations" : [ {
    "textCitation" : "[See affineequiv on Metamath](http://us.metamath.org/mpegif/affineequiv.html)"
  } ],
  "names" : [ "affineequiv" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_wph", "#T_wi", "#T_cA", "#T_wcel", "#T_cc", "#T_wph", "#T_wi", "#T_cB", "#T_wcel", "#T_cc", "#T_wph", "#T_wi", "#T_cC", "#T_wcel", "#T_cc", "#T_wph", "#T_wi", "#T_cD", "#T_wcel", "#T_cc", "#T_wph", "#T_wi", "#T_cB", "#T_wceq", "#T_cD", "#T_cmul", "#T_cA", "#T_caddc", "#T_c1", "#T_cmin", "#T_cD", "#T_cmul", "#T_cC", "#T_wb", "#T_cC", "#T_cmin", "#T_cB", "#T_wceq", "#T_cD", "#T_cmul", "#T_cC", "#T_cmin", "#T_cA" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Equivalence between two ways of expressing ` B ` as an affine combination of ` A ` and ` C ` .  (Contributed by David Moews, 28-Feb-2017.) ",
  "statement" : "affineequiv.A $e |- ( ph -> A e. CC ) $.\naffineequiv.B $e |- ( ph -> B e. CC ) $.\naffineequiv.C $e |- ( ph -> C e. CC ) $.\naffineequiv.D $e |- ( ph -> D e. CC ) $.\naffineequiv $p |- ( ph -> ( B = ( ( D x. A ) + ( ( 1 - D ) x. C ) ) <-> ( C - B ) = ( D x. ( C - A ) ) ) ) $."
}