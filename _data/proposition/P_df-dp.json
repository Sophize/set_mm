{
  "citations" : [ {
    "textCitation" : "[See df-dp on Metamath](http://us.metamath.org/mpegif/df-dp.html)"
  } ],
  "names" : [ "df-dp" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_cdp", "#T_wceq", "#T_vx", "#T_cmpt2--1", "#T_cn0", "#T_cmpt2--2", "#T_vy", "#T_cmpt2--3", "#T_cr", "#T_cmpt2--4", "#T_cdp2", "#T_vx", "#T_vy", "#T_vx", "#T_vy" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " Define the ` . ` (decimal point) operator.  For example, ` ( 1 . 5 ) = ( 3 / 2 ) ` , and ` -u ( ; 3 2 . _ 7 _ 1 8 ) = -u ( ; ; ; ; 3 2 7 1 8 / ; ; ; 1 0 0 0 ) ` Unary minus, if applied, should normally be applied in front of the parentheses. Metamath intentionally does not have a built-in construct for numbers, so it can show that numbers are something you can build based on set theory.  However, that means that metamath has no built-in way to handle decimal numbers as traditionally written, e.g., \"2.54\", and its parsing system intentionally does not include the complexities necessary to define such a parsing system.  Here we create a system for modeling traditional decimal point notation; it is not syntactically identical, but it is sufficiently similar so it is a reasonable model of decimal point notation.  It should also serve as a convenient way to write some fractional numbers. The RHS is ` RR ` , not ` QQ ` ; this should simplify some proofs.  The LHS is ` NN0 ` , since that is what is used in practice.  The definition intentionally does not allow negative numbers on the LHS; if it did, nonzero fractions would produce the wrong results.  (It would be possible to define the decimal point to do this, but using it would be more complicated, and the expression ` -u ( A . B ) ` is just as convenient.)  (Contributed by David A. Wheeler, 15-May-2015.) ",
  "statement" : "df-dp $p |- . = ( x e. NN0 , y e. RR |-> _ x y ) $.\n$d x y $."
}