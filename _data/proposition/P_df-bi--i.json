{
  "citations" : [ {
    "textCitation" : "[See df-bi on Metamath](http://us.metamath.org/mpegif/df-bi.html)"
  } ],
  "names" : [ "df-bi" ],
  "language" : "METAMATH_SET_MM",
  "lookupTerms" : [ "#T_wph", "#T_wb", "#T_wps", "#T_wi", "#T_wph", "#T_wi", "#T_wps", "#T_wa", "#T_wps", "#T_wi", "#T_wph", "#T_wa", "#T_wph", "#T_wi", "#T_wps", "#T_wa", "#T_wps", "#T_wi", "#T_wph", "#T_wi", "#T_wph", "#T_wb", "#T_wps" ],
  "metaLanguage" : "METAMATH",
  "remarks" : " This is our first definition, which introduces and defines the biconditional connective ` <-> ` .  We define a wff of the form ` ( ph <-> ps ) ` as an abbreviation for ` ( ( ph -> ps ) /\\ ( ps -> ph ) ) ` . Unlike most traditional developments, we have chosen not to have a separate symbol such as \"Df.\" to mean \"is defined as.\"  Instead, we will later use the biconditional connective for this purpose, as it allows us to use logic to manipulate definitions directly.  For an example of such a definition, see ~ df-3or .  This greatly simplifies many proofs since it eliminates the need for a separate mechanism for introducing and eliminating definitions.  Of course, we cannot use this mechanism to define the biconditional itself, since it hasn't been introduced yet. Instead, we use a more general form of definition, described as follows. In its most general form, a definition is simply an assertion that introduces a new symbol (or a new combination of existing symbols, as in ~ df-3an ) that is eliminable and does not strengthen the existing language.  The latter requirement means that the set of provable statements not containing the new symbol (or new combination) should remain exactly the same after the definition is introduced.  Our definition of the biconditional may look unusual compared to most definitions, but it strictly satisfies these requirements. The justification for our definition is that if we mechanically replace ` ( ph <-> ps ) ` (the definiendum i.e. the thing being defined) with ` ( ( ph -> ps ) /\\ ( ps -> ph ) ) ` (the definiens i.e. the defining expression) in the definition, the definition becomes the previously proved theorem ~ biijust .  It is impossible to use ~ df-bi to prove any statement expressed in the original language that can't be proved from the original axioms, because if we simply replace each instance of ~ df-bi in the proof with the corresponding ~ biijust instance, we will end up with a proof from the original axioms. Note that from Metamath's point of view, a definition is just another axiom - i.e. an assertion we claim to be true - but from our high level point of view, we are are not strengthening the language.  To indicate this fact, we prefix definition labels with \"df-\" instead of \"ax-\".  (This prefixing is an informal convention that means nothing to the Metamath proof verifier; it is just for human readability.) ~ df-bi itself is a conjunction of two implications (to avoid using the biconditional in its own definition), but once we have the biconditional, we can prove ~ dfbi2 which uses the biconditional instead. Other definitions of the biconditional, such as ~ dfbi3dc , only hold for decidable propositions, not all propositions.  (Contributed by NM, 5-Aug-1993.)  (Revised by Jim Kingdon, 24-Nov-2017.) ",
  "statement" : "df-bi $p |- ( ( ( ph <-> ps ) -> ( ( ph -> ps ) /\\ ( ps -> ph ) ) ) /\\ ( ( ( ph -> ps ) /\\ ( ps -> ph ) ) -> ( ph <-> ps ) ) ) $."
}