{
  "parentPageId": "",
  "title": "Interface",
  "description": "The following is the informal description of the expected input and output format generated by the framework. The interface defined should be general enough for our two main use cases - integration with proof assistants (like mmj2/metamath.exe/OpenAI proof assistant) and use as formal proof calculators. Based on our design, we will later decide how it is implemented - part-of/extension-of an assistant, a standalone program, or something else.  \\\nThe interface defined here is not final, please feel to make updates/provide suggestions. While I think we will be able to agree on a single interface, feel free to add a subpage if you have something else in mind.\n\n### Input\nThe input query asking for a formal proof will provide two inputs: \n\n1. The Metamath database to use (set.mm, iset.mm, nf.mm, etc)\n2. The query string containing the input theorem needed for proof.\n\nThe query string can have the following two formats:\n* Short-form when no hypothesis or distinct variables are needed.\n  ```\n  |- ( ( ; 1 8 + ; 2 7 ) x. 2 ) = ; 9 0\n  ```\n\n* Full specification\n  ```\n  $d x ph $.  $d x ps $.\n  $e |- ( ph -> ( ps -> ch ) ) $.\n  $p |- ( ph -> ( ps -> A. x ch ) $.\n  ```\n\nNotes:\n1. $e, $d, and $p statements can be in any order.\n2. All whitespaces are equivalent and function as delimiters.\n3. The input can also contain labels for the assertion. The framework can choose to ignore these inputs and assign different ids as it sees fit.\n4. Nesting and comments are not supported.\n5. New $c, $v, $f may be supported in the future, if needed.\n\n### Output\nThe output of the query will produce a string containing the proofs in the format of set.mm (or whichever database is used). In other words, if we append the framework output to set.mm file, the result should pass the verifier. Note that it is the responsibility of the framework to come up with labels that are unique amongst themselves and existing database labels. Also, the output may contain one or more intermediate lemmas (theorems) required for the proof.\n\n#### Special Case: Framework can't produce a result\nIn case the framework is unable to produce an output, it returns a string indicating so:\n1. When the framework knows that the statement can't be proven. E.g. When `|- 2 + 2 = 5` is provided, `Input theorem appears to be invalid.` is returned.\n2. When the framework doesn't know how to prove the statement. E.g. When `|- _pi  e. ( CC \\ AA )` is provided, `Not supported` is returned.\n\nAny additional information can like `2 plus 2 is actually 4` can be appended to the string being returned.\n\n#### Special Case: Input statement is already present in the database.\nIn this case, we only return the label for the existing proposition. For example, when the input is `|- ( 3 x. 2 ) = 6` the framework returns the label `3t2e6`.\n\n### Encoding\nThe input/output data will be encoded in JSON format. The following shows the various fields in the input and output format. Specific proposals are free to add additional fields in the input and output data. However, all proposals/implementations must also work with the minimum fields.\n\n#### Input Sample\n\n```\n{\n  \"database\": \"set.mm\",\n  \"statement\": \"|- ( 2 + 3 ) = 5\"\n}\n```\n\n#### Output Sample\n```\n{\n  \"result\": \".2.p.3.e.5. $p |- ( 2 + 3 ) = 5 $= \"\n            \"( c5 c2 c3 caddc co 3p2e5 eqcomi ) ABCDEFG $.\",\n   \"existingLabel\": \"2p3e5\",  // If 2p3e5 was in set.mm\n   \"remarks\": \"Not supported\" //  If couldn't get proof.\n}\n```",
  "sortHint": 0,
  "contributor": {
    "handle": "abc"
  }
}